// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package mock_statemachine is a generated GoMock package.
package mock_statemachine

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	storage "github.com/kkiling/statemachine/internal/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateState mocks base method.
func (m *MockStorage) CreateState(ctx context.Context, state *storage.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateState indicates an expected call of CreateState.
func (mr *MockStorageMockRecorder) CreateState(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateState", reflect.TypeOf((*MockStorage)(nil).CreateState), ctx, state)
}

// GetStateByID mocks base method.
func (m *MockStorage) GetStateByID(ctx context.Context, stateID uuid.UUID) (*storage.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByID", ctx, stateID)
	ret0, _ := ret[0].(*storage.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByID indicates an expected call of GetStateByID.
func (mr *MockStorageMockRecorder) GetStateByID(ctx, stateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByID", reflect.TypeOf((*MockStorage)(nil).GetStateByID), ctx, stateID)
}

// GetStateByIdempotencyKey mocks base method.
func (m *MockStorage) GetStateByIdempotencyKey(ctx context.Context, idempotencyKey string) (*storage.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByIdempotencyKey", ctx, idempotencyKey)
	ret0, _ := ret[0].(*storage.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByIdempotencyKey indicates an expected call of GetStateByIdempotencyKey.
func (mr *MockStorageMockRecorder) GetStateByIdempotencyKey(ctx, idempotencyKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByIdempotencyKey", reflect.TypeOf((*MockStorage)(nil).GetStateByIdempotencyKey), ctx, idempotencyKey)
}

// RunTransaction mocks base method.
func (m *MockStorage) RunTransaction(ctx context.Context, txFunc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, txFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockStorageMockRecorder) RunTransaction(ctx, txFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockStorage)(nil).RunTransaction), ctx, txFunc)
}

// SaveStepExecuteInfo mocks base method.
func (m *MockStorage) SaveStepExecuteInfo(ctx context.Context, execute storage.StepExecuteInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStepExecuteInfo", ctx, execute)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStepExecuteInfo indicates an expected call of SaveStepExecuteInfo.
func (mr *MockStorageMockRecorder) SaveStepExecuteInfo(ctx, execute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStepExecuteInfo", reflect.TypeOf((*MockStorage)(nil).SaveStepExecuteInfo), ctx, execute)
}

// UpdateState mocks base method.
func (m *MockStorage) UpdateState(ctx context.Context, stateID uuid.UUID, state storage.UpdateState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, stateID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockStorageMockRecorder) UpdateState(ctx, stateID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockStorage)(nil).UpdateState), ctx, stateID, state)
}

// MockUUIDGenerator is a mock of UUIDGenerator interface.
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator.
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance.
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockUUIDGenerator) New() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockUUIDGeneratorMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUUIDGenerator)(nil).New))
}

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}
